//
//  OnboardingView.swift
//  ToneDown
//
//  Created by Dyuven on 10.08.2025.
//

import SwiftUI

struct OnboardingView: View {
    @EnvironmentObject var appState: AppState
    @State private var currentPage = 0
    @State private var isPressed = false
    
    let pages = [
        OnboardingPage(
            emoji: "üì±",
            title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ToneDown",
            description: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—ë –≤—Ä–µ–º—è –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –±–æ–ª–µ–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º"
        ),
        OnboardingPage(
            emoji: "üé®",
            title: "–£–±–µ—Ä–∏ —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞",
            description: "–û–¥–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –∏ Instagram, TikTok, YouTube —Å—Ç–∞–Ω—É—Ç –º–µ–Ω–µ–µ \"–≤–∫—É—Å–Ω—ã–º–∏\" –≤ —á—ë—Ä–Ω–æ-–±–µ–ª–æ–º —Ä–µ–∂–∏–º–µ"
        ),
        OnboardingPage(
            emoji: "üß†",
            title: "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ",
            description: "–°–µ—Ä—ã–µ —Ç–æ–Ω–∞ —Å–Ω–∏–∂–∞—é—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–º–æ–≥–∞—é—Ç —Ç—Ä–∞—Ç–∏—Ç—å –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–µ–Ω—Ç–∞—Ö"
        ),
        OnboardingPage(
            emoji: "‚ö°",
            title: "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ",
            description: "–ë—ã—Å—Ç—Ä–æ –≤–∫–ª—é—á–∞–π –∏ –≤—ã–∫–ª—é—á–∞–π —Ä–µ–∂–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏"
        )
    ]
    
    var body: some View {
        VStack(spacing: 0) {
            // Progress indicator
            HStack(spacing: 8) {
                ForEach(0..<pages.count, id: \.self) { index in
                    Capsule()
                        .fill(index <= currentPage ? DS.Color.accent : Color.gray.opacity(0.3))
                        .frame(width: index == currentPage ? 24 : 8, height: 4)
                        .animation(.spring(response: 0.3), value: currentPage)
                }
            }
            .padding(.top, 20)
            .padding(.horizontal, 20)
            
            Spacer()
            
            // Page content
            TabView(selection: $currentPage) {
                ForEach(0..<pages.count, id: \.self) { index in
                    OnboardingPageView(page: pages[index])
                        .tag(index)
                }
            }
            .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never))
            .frame(maxHeight: .infinity)
            
            // Navigation buttons
            VStack(spacing: 16) {
                if currentPage < pages.count - 1 {
                    Button {
                        withAnimation(.spring()) {
                            currentPage += 1
                        }
                        UIImpactFeedbackGenerator(style: .light).impactOccurred()
                    } label: {
                        Text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                            .font(DS.Typo.button)
                            .frame(maxWidth: .infinity)
                            .padding(.vertical, 16)
                            .background(DS.Color.accent)
                            .foregroundColor(.white)
                            .clipShape(RoundedRectangle(cornerRadius: 16, style: .continuous))
                    }
                    .scaleEffect(isPressed ? 0.98 : 1.0)
                    .animation(.spring(response: 0.2), value: isPressed)
                } else {
                    Button {
                        appState.completeOnboarding()
                        UIImpactFeedbackGenerator(style: .medium).impactOccurred()
                    } label: {
                        Text("–ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
                            .font(DS.Typo.button)
                            .frame(maxWidth: .infinity)
                            .padding(.vertical, 16)
                            .background(DS.Color.accent)
                            .foregroundColor(.white)
                            .clipShape(RoundedRectangle(cornerRadius: 16, style: .continuous))
                    }
                    .scaleEffect(isPressed ? 0.98 : 1.0)
                    .animation(.spring(response: 0.2), value: isPressed)
                }
            }
            .padding(.horizontal, 20)
            .padding(.bottom, 34)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(appBackground.ignoresSafeArea())
        .onReceive(NotificationCenter.default.publisher(for: UIApplication.willEnterForegroundNotification)) { _ in
            // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        }
    }
    
    // MARK: - Dynamic colors
    private var appBackground: Color {
        Color(uiColor: .init { trait in
            trait.userInterfaceStyle == .dark
            ? UIColor(DS.Color.backgroundDark)
            : UIColor(DS.Color.backgroundLight)
        })
    }
}

// MARK: - OnboardingPageView
struct OnboardingPageView: View {
    let page: OnboardingPage
    
    var body: some View {
        VStack(spacing: 32) {
            Text(page.emoji)
                .font(.system(size: 80))
                .padding(.top, 20)
            
            VStack(spacing: 16) {
                Text(page.title)
                    .font(DS.Typo.title)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 20)
                
                Text(page.description)
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 32)
                    .lineLimit(nil)
            }
            
            Spacer()
        }
    }
}

// MARK: - OnboardingPage Model
struct OnboardingPage {
    let emoji: String
    let title: String
    let description: String
}

// MARK: - Preview
#Preview {
    OnboardingView()
        .environmentObject(AppState())
}
