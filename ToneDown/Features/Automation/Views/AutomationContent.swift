//
//  AutomationContent.swift
//  ToneDown
//
//  Created by Dyuven on 10.08.2025.
//

import SwiftUI

// MARK: - Base Commands Setup Content
struct BaseCommandsSetupContent: View {
    @ObservedObject var viewModel: AutomationViewModel
    
    // MARK: - Initialization
    init(viewModel: AutomationViewModel) {
        self.viewModel = viewModel
    }
    
    var body: some View {
        VStack(spacing: 20) {
            // Header
            VStack(spacing: 12) {
                Text("‚öôÔ∏è")
                    .font(.system(size: 40))
                Text("–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥")
                    .font(.title2.weight(.bold))
                Text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 16)
            }
            
            // Info block
            VStack(alignment: .leading, spacing: 12) {
                HStack(spacing: 10) {
                    Image(systemName: "info.circle.fill")
                        .font(.title3)
                        .foregroundColor(DS.Color.accent)
                    
                    Text("–î–≤–∞ —à–æ—Ä—Ç–∫–∞—Ç–∞")
                        .font(.system(size: 15, weight: .semibold, design: .rounded))
                        .foregroundColor(.primary)
                }
                
                Text("–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—ã–º —Ä–µ–∂–∏–º–æ–º")
                    .font(.system(size: 13, weight: .medium, design: .rounded))
                    .foregroundColor(.secondary)
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .fixedSize(horizontal: false, vertical: true)
            }
            .padding(.vertical, 16)
            .padding(.horizontal, 16)
            .frame(maxWidth: .infinity)
            .background(
                RoundedRectangle(cornerRadius: 14, style: .continuous)
                    .fill(DS.Color.accent.opacity(0.05))
                    .overlay(
                        RoundedRectangle(cornerRadius: 14, style: .continuous)
                            .stroke(DS.Color.accent.opacity(0.2), lineWidth: 1)
                    )
            )
            .padding(.horizontal, 16)
            
            // Import buttons
            VStack(spacing: 12) {
                Button(action: {
                    Task {
                        await viewModel.importEnableCommand()
                    }
                }) {
                    HStack(spacing: 14) {
                        VStack(alignment: .leading, spacing: 3) {
                            Text("–í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä—ã–π —Ä–µ–∂–∏–º")
                                .font(.system(size: 15, weight: .semibold, design: .rounded))
                                .foregroundColor(.white)
                            
                            Text("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
                                .font(.system(size: 13, weight: .medium, design: .rounded))
                                .foregroundColor(.white.opacity(0.8))
                        }
                        
                        Spacer()
                        
                        Image(systemName: "arrow.up.right.square.fill")
                            .font(.subheadline)
                            .foregroundColor(.white)
                    }
                    .padding(.vertical, 16)
                    .padding(.horizontal, 16)
                    .background(
                        LinearGradient(
                            colors: [DS.Color.accent, DS.Color.accent.opacity(0.8)],
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .clipShape(RoundedRectangle(cornerRadius: 14, style: .continuous))
                    .shadow(color: DS.Color.accent.opacity(0.3), radius: 8, x: 0, y: 4)
                }
                .buttonStyle(.plain)
                
                Button(action: {
                    Task {
                        await viewModel.importDisableCommand()
                    }
                }) {
                    HStack(spacing: 14) {
                        VStack(alignment: .leading, spacing: 3) {
                            Text("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç–∞")
                                .font(.system(size: 15, weight: .semibold, design: .rounded))
                                .foregroundColor(.white)
                            
                            Text("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
                                .font(.system(size: 13, weight: .medium, design: .rounded))
                                .foregroundColor(.white.opacity(0.8))
                        }
                        
                        Spacer()
                        
                        Image(systemName: "arrow.up.right.square.fill")
                            .font(.subheadline)
                            .foregroundColor(.white)
                    }
                    .padding(.vertical, 16)
                    .padding(.horizontal, 16)
                    .background(
                        LinearGradient(
                            colors: [DS.Color.accent, DS.Color.accent.opacity(0.8)],
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .clipShape(RoundedRectangle(cornerRadius: 14, style: .continuous))
                    .shadow(color: DS.Color.accent.opacity(0.3), radius: 8, x: 0, y: 4)
                }
                .buttonStyle(.plain)
            }
            .padding(.horizontal, 16)
            
            // Confirmation button
            VStack(spacing: 12) {
                Text("–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ")
                    .font(.subheadline.weight(.medium))
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                
                Button {
                    Task {
                        await viewModel.confirmCommandsCreation()
                    }
                } label: {
                    HStack(spacing: 10) {
                        Image(systemName: "checkmark.circle.fill")
                            .font(.subheadline)
                        Text("–ö–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω—ã")
                            .font(.headline.weight(.semibold))
                    }
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .frame(height: 52)
                    .background(
                        LinearGradient(
                            colors: [.green, .green.opacity(0.8)],
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .clipShape(RoundedRectangle(cornerRadius: 14, style: .continuous))
                    .shadow(color: .green.opacity(0.3), radius: 8, x: 0, y: 4)
                }
                .padding(.horizontal, 16)
            }
            .padding(.top, 8)
        }
        .padding(.top, 12)
    }
}

// MARK: - Automation Content (shown after base commands are created)
struct AutomationContent: View {
    @ObservedObject var viewModel: AutomationViewModel
    
    // MARK: - Initialization
    init(viewModel: AutomationViewModel) {
        self.viewModel = viewModel
    }
    
    var body: some View {
        VStack(spacing: 24) {
            // Automation grid
            LazyVGrid(columns: [
                GridItem(.flexible(), spacing: 16),
                GridItem(.flexible(), spacing: 16)
            ], spacing: 16) {
                NavigationLink(destination: AppTriggersSetupView()) {
                    ModernAutomationCard(
                        icon: "apps.iphone",
                        title: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                        subtitle: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏",
                        color: .purple,
                        isEnabled: true
                    )
                }
                .buttonStyle(.plain)
                
                ModernAutomationCard(
                    icon: "clock.fill",
                    title: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                    subtitle: "–ü–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫",
                    color: .orange,
                    isEnabled: true
                )
                
                ModernAutomationCard(
                    icon: "moon.zzz.fill",
                    title: "Focus",
                    subtitle: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π",
                    color: .indigo,
                    isEnabled: true
                )
                
                ModernAutomationCard(
                    icon: "location.fill",
                    title: "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è",
                    subtitle: "–ü–æ –º–µ—Å—Ç—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è",
                    color: .green,
                    isEnabled: true
                )
            }
            .padding(.horizontal, 20)
            
            // Quick help
            VStack(spacing: 16) {
                Text("üí° –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é?")
                    .font(.subheadline.weight(.semibold))
                    .foregroundColor(.primary)
                
                Text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
            }
            .padding(.vertical, 16)
            .padding(.horizontal, 20)
            .background(
                RoundedRectangle(cornerRadius: 16, style: .continuous)
                    .fill(.ultraThinMaterial)
            )
            .padding(.horizontal, 20)
            
            // Reset commands button
            Button {
                viewModel.resetCommands()
            } label: {
                HStack(spacing: 8) {
                    Image(systemName: "arrow.clockwise")
                        .font(.subheadline)
                    Text("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
                        .font(.subheadline.weight(.medium))
                }
                .foregroundColor(.secondary)
                .padding(.vertical, 8)
                .padding(.horizontal, 16)
                .background(
                    RoundedRectangle(cornerRadius: 8, style: .continuous)
                        .fill(.secondary.opacity(0.1))
                )
            }
            .padding(.horizontal, 20)
        }
        .padding(.top, 20)
    }
}

// MARK: - Free User Content
struct FreeUserContent: View {
    @Binding var showDemo: Bool
    @Binding var showPurchase: Bool
    
    var body: some View {
        VStack(spacing: 24) {
            // Premium required message
            VStack(spacing: 16) {
                Text("üîí")
                    .font(.system(size: 56))
                Text("–¢—Ä–µ–±—É–µ—Ç—Å—è Premium")
                    .font(.title.weight(.bold))
                Text("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 20)
            }
            
            // Purchase button
            Button {
                showPurchase = true
            } label: {
                HStack(spacing: 12) {
                    Image(systemName: "crown.fill")
                        .font(.title3)
                    Text("–ü–æ–ª—É—á–∏—Ç—å Premium")
                        .font(.headline.weight(.semibold))
                }
                .foregroundColor(.white)
                .frame(maxWidth: .infinity)
                .frame(height: 56)
                .background(
                    LinearGradient(
                        colors: [DS.Color.accent, DS.Color.accent.opacity(0.8)],
                        startPoint: .leading,
                        endPoint: .trailing
                    )
                )
                .clipShape(RoundedRectangle(cornerRadius: 16, style: .continuous))
                .shadow(color: DS.Color.accent.opacity(0.3), radius: 12, x: 0, y: 6)
            }
            .padding(.horizontal, 20)
            
            // Demo button
            Button {
                showDemo = true
            } label: {
                HStack(spacing: 12) {
                    Image(systemName: "play.circle.fill")
                        .font(.title3)
                    Text("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–µ–º–æ")
                        .font(.headline.weight(.semibold))
                }
                .foregroundColor(DS.Color.accent)
                .frame(maxWidth: .infinity)
                .frame(height: 56)
                .background(
                    RoundedRectangle(cornerRadius: 16, style: .continuous)
                        .fill(DS.Color.accent.opacity(0.1))
                )
            }
            .padding(.horizontal, 20)
        }
        .padding(.top, 20)
    }
}

#Preview {
    VStack(spacing: 40) {
        BaseCommandsSetupContent(viewModel: AutomationViewModel())
            .environmentObject(AppState())
        
        Divider()
        
        AutomationContent(viewModel: AutomationViewModel())
            .environmentObject(AppState())
        
        Divider()
        
        FreeUserContent(showDemo: .constant(false), showPurchase: .constant(false))
    }
    .padding()
}
